import collections


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        Union Find
        T:O(n^2) S:O(n)
        Runtime: 1632 ms, faster than 52.05% of Python online submissions for Minimize Malware Spread.
        Memory Usage: 15.1 MB, less than 73.17% of Python online submissions for Minimize Malware Spread.
        https://leetcode.com/problems/minimize-malware-spread/discuss/181129/C%2B%2BPython-Union-Found
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        n = len(graph)
        uf = UnionFind(n)
        for i in range(n-1):
            for j in range(i+1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)
        area = collections.Counter([uf.find(i) for i in range(n)])
        malware = collections.Counter([uf.find(i) for i in initial])
        max_area, ans = 0, min(initial)
        for i in initial:
            if malware[uf.find(i)] == 1:
                if area[uf.find(i)] > max_area:
                    max_area, ans = area[uf.find(i)], i
                elif area[uf.find(i)] == max_area:
                    ans = min(i, ans)
        return ans

class UnionFind(object):
    def __init__(self, n):
        self.parent = range(n)

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        px = self.find(x)
        py = self.find(y)
        if px != py:
            self.parent[py] = px


print Solution().minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1])
print Solution().minMalwareSpread([[1,1,1],[1,1,1],[1,1,1]], [1,2])